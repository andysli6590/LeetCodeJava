/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root)  {  
    List<Integer> res=new ArrayList<Integer>();  
    if(root==null) return res;  
    Stack<TreeNode> st=new Stack<TreeNode>();  
    while(root!=null || !st.isEmpty()){  
      if(root!=null){  
        st.push(root);  
        res.add(root.val);  
        root=root.left;  
      }  
      else{  
        root=st.pop();  
        root=root.right;  
      }  
    }  
    return res;  
   }  
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> res=new ArrayList<Integer>();  
    helper(root,res);  
     return res;  
   }  

   public void helper(TreeNode root, List<Integer> res){  
     if(root==null) 
     return;  

   res.add(root.val);  
     helper(root.left,res);  
     helper(root.right,res);  
   }
}


