public class LFUCache {
    HashMap<Integer, Integer> vals; // store key --value
    HashMap<Integer, Integer> freqs; // store frequency
    HashMap<Integer, LinkedHashSet<Integer>> Lists; // store freq -- key
    int capacity;
    int minFreq = 1;
    
    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.vals = new HashMap<>();
        this.freqs = new HashMap<>();
        this.lists = new HashMap<>();
        this.lists.put(1, new LinkedHashSet<>());
    }
    
    public int get(int key) {
        if (!vals.containsKey(key)){
            return -1;
        }
        int freq = freqs.get(key);
        freqs.put(key, freq + 1);
        
        lists.get(freq).remove(key);
        
        if(freq == minFreq && lists.get(freq).size() == 0){
            minFreq++;
        }
        
        if(!lists.containsKey(freq + 1)){
            lists.put(freq + 1, new LinkedHashSet<>());
        }
        
        lists.get(freq + 1).add(key);
        
        return vals.get(key);
    }
    
    public void put(int key, int value) {
        if(this.capacity <= 0){
            return;
        }
        
        if(vals.containsKey(key)){
            vals.put(key, value);
            get(key);
            return;
        }
        
    if(vals.size() >= this.capacity){
        int evit = lists.get(minFreq).iterator().next();
        lists.get(minFreq).remove(evit);
        vals.remove(evit);
    }
        vals.put(key, value);
        freqs.put(key, 1);
        minFreq = 1;
        lists.get(1).add(key);
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
