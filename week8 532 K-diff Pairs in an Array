//Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array.
//Here a k-diff pair is defined as an integer pair (i,j), where i and j are both numbers in the array and their absolute difference is K.
//Assumption 1: not sorted
//Assumption 2: duplicates
//Assumption 3: unique pairs
//Assumption 4: k can be smaller or equal to 0


//HashMap
public int findPairs(int[] nums, int k){
if(nums == null || nums.length <= 1){
   return 0;
   }
   
   Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();
   int count = 0;
   for (int n:nums){
      countMap.put(n, countMap.getOrDefault(n,0) + 1);
      }
    for (Map.Entry<Integer, Integer> entry: countMap.entrySet()){
      if(k != 0){
         if(countMap.containsKey(entry.getKey() - k)){
            count++;
           }
         }else{
           if(entry.getValue() > 1){
           count++;
           }
          }
        }  
        
     return count;
  }


//Two Pointers
public int findPairs(int[] nums, int k){
   if(nums == 0 || nums.length <= 1){
     return 0;
     }
     
     Arrays.sort(nums);
     k = Math.abs(k);
     
     int left = 0;
     int right = 1;
     int count = 0;
     while(right < nums.length){
       if(left >= right || nums[right] - nums[left] < k){
          right++;
        }else if(left > 0 && nums[left] == nums[left - 1] || nums[right] - nums[left] > k){
          legt++;
        }else {
        right++;
        count++;
        }
       }
      
      return count;
    }
//Summary -- Linear Structure --> Pointers
//1. Physical Meaning of Pointers:scanner or fixer
//2. In each iteration, how to deal with fixer? Not scanner
//3. Tricky: does fixer include itself?
