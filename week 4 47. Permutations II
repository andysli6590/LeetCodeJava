public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0){
            return res;
        }
        Arrays.sort(nums);
        helper(res, new ArrayList<Integer>(), new boolean [nums.length], nums);
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> path, boolean[] visited, int[] nums){
        if(path.size() == nums.length){
            res.add(new ArrayList<Integer>(path));
            return;
        }
        
        for (int i = 0; i < nums.length; i++){
            if (visited[i] || (i != 0 && nums[i] == nums[i-1] && visited[i-1]))
            {
                continue;
            }
            path.add(nums[i]);
            visited[i] = true;
            helper(res, path, visited, nums);
            path.remove(path.size() - 1);
            visited[i] = false;
        }
        return;
    }
}
